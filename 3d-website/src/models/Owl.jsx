/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Lilly! (https://sketchfab.com/LillyanneTr)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/day-20-snowy-owl-745c105544784b9a80bbec49cccd1580
Title: Day 20 - Snowy Owl
*/

import React, { useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useAnimations } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';

import owlScene from '../assets/3d/owl.glb';

const Owl = ({...props}) => {
    const owlRef = useRef();
    const { nodes, materials, animations } = useGLTF(owlScene);
    const { actions } = useAnimations(animations, owlRef);

    useEffect(() => {
        actions['ArmatureAction'].play();
        // Set initial rotation to face forward
    }, [actions]);
    useEffect(() => {
        actions["ArmatureAction"].play();
      }, []);
    
      useFrame(({ clock, camera }) => {
        // Update the Y position to simulate bird-like motion using a sine wave
        owlRef.current.position.y = Math.sin(clock.elapsedTime) * 0.2 + 2;
    
        // Check if the bird reached a certain endpoint relative to the camera
        if (owlRef.current.position.x > camera.position.x + 10) {
          // Change direction to backward and rotate the bird 180 degrees on the y-axis
          owlRef.current.rotation.y = Math.PI;
        } else if (owlRef.current.position.x < camera.position.x - 10) {
          // Change direction to forward and reset the bird's rotation
          owlRef.current.rotation.y = 0;
        }
    
        // Update the X and Z positions based on the direction
        if (owlRef.current.rotation.y === 0) {
          // Moving forward
          owlRef.current.position.x += 0.01;
          owlRef.current.position.z -= 0.01;
        } else {
          // Moving backward
          owlRef.current.position.x -= 0.01;
          owlRef.current.position.z += 0.01;
        }
      });
  return (
    <group ref={owlRef} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2.5, 0.5, 2]} scale={0.07}>
          <group name="Root">
            <group
              name="Sun"
              position={[-4.323, -22.57, 15.986]}
              rotation={[0.934, -0.304, -0.195]}>
              <group name="Sun_1" />
            </group>
            <group name="Armature" position={[0, 0.748, -0.934]}>
              <primitive object={nodes.Armature_rootJoint} />
              <skinnedMesh
                name="Cube_0"
                geometry={nodes.Cube_0.geometry}
                material={materials.Eyes}
                skeleton={nodes.Cube_0.skeleton}
              />
              <skinnedMesh
                name="Plane_0"
                geometry={nodes.Plane_0.geometry}
                material={materials.Material}
                skeleton={nodes.Plane_0.skeleton}
              />
              <group name="Cube" position={[0, -4.415, 4.174]} />
              <group name="Plane" position={[0, -1.748, 0.934]} />
            </group>
          </group>
        </group>
      </group>
    </group>
  )
};

export default Owl;

